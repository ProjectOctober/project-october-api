/**
 * generated by Scrooge 3.0.5-SNAPSHOT
 */
package cassie

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}

/** A token and its weight
 * @param t, the token itself
 * @param w, the weight we use for the token, most likely tf-idf based
 */
object Token extends ThriftStructCodec[Token] {
  val Struct = new TStruct("Token")
  val TField = new TField("t", TType.STRING, 1)
  val WField = new TField("w", TType.DOUBLE, 2)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Token) {
    if (_item.t == null) throw new TProtocolException("Required field t cannot be null")
  }

  def encode(_item: Token, _oproto: TProtocol) { _item.write(_oproto) }
  def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): Token = decode(_iprot)

  def apply(
    t: String,
    w: Double
  ): Token = new Immutable(
    t,
    w
  )

  def unapply(_item: Token): Option[Product2[String, Double]] = Some(_item)

  object Immutable extends ThriftStructCodec[Token] {
    def encode(_item: Token, _oproto: TProtocol) { _item.write(_oproto) }
    def decode(_iprot: TProtocol) = {
      var t: String = null
      var _got_t = false
      var w: Double = 0.0
      var _got_w = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* t */
              _field.`type` match {
                case TType.STRING => {
                  t = {
                    _iprot.readString()
                  }
                  _got_t = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* w */
              _field.`type` match {
                case TType.DOUBLE => {
                  w = {
                    _iprot.readDouble()
                  }
                  _got_w = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      if (!_got_t) throw new TProtocolException("Required field 'Token' was not found in serialized data for struct Token")
      if (!_got_w) throw new TProtocolException("Required field 'Token' was not found in serialized data for struct Token")
      new Immutable(
        t,
        w
      )
    }
  }

  /**
   * The default read-only implementation of Token.  You typically should not need to
   * directly reference this class; instead, use the Token.apply method to construct
   * new instances.
   */
  class Immutable(
    val t: String,
    val w: Double
  ) extends Token

  /**
   * This Proxy trait allows you to extend the Token trait with additional state or
   * behavior and implement the read-only methods from Token using an underlying
   * instance.
   */
  trait Proxy extends Token {
    protected def _underlying_Token: Token
    def t: String = _underlying_Token.t
    def w: Double = _underlying_Token.w
  }
}

trait Token extends ThriftStruct
  with Product2[String, Double]
  with java.io.Serializable
{
  import Token._

  def t: String
  def w: Double

  def _1 = t
  def _2 = w

  override def write(_oprot: TProtocol) {
    Token.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val t_item = t
      _oprot.writeFieldBegin(TField)
      _oprot.writeString(t_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val w_item = w
      _oprot.writeFieldBegin(WField)
      _oprot.writeDouble(w_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    t: String = this.t, 
    w: Double = this.w
  ): Token = new Immutable(
    t, 
    w
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Token]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => t
    case 1 => w
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Token"
}