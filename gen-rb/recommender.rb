#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'october_types'

    module Backend
      module Recommender
        class Client
          include ::Thrift::Client

          def ping()
            send_ping()
            return recv_ping()
          end

          def send_ping()
            send_message('ping', Ping_args)
          end

          def recv_ping()
            result = receive_message(Ping_result)
            return result.success unless result.success.nil?
            raise result.te unless result.te.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ping failed: unknown result')
          end

          def recPosts(user_id)
            send_recPosts(user_id)
            return recv_recPosts()
          end

          def send_recPosts(user_id)
            send_message('recPosts', RecPosts_args, :user_id => user_id)
          end

          def recv_recPosts()
            result = receive_message(RecPosts_result)
            return result.success unless result.success.nil?
            raise result.nfe unless result.nfe.nil?
            raise result.ee unless result.ee.nil?
            raise result.te unless result.te.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'recPosts failed: unknown result')
          end

          def addUser(user_id)
            send_addUser(user_id)
            return recv_addUser()
          end

          def send_addUser(user_id)
            send_message('addUser', AddUser_args, :user_id => user_id)
          end

          def recv_addUser()
            result = receive_message(AddUser_result)
            return result.success unless result.success.nil?
            raise result.ee unless result.ee.nil?
            raise result.te unless result.te.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addUser failed: unknown result')
          end

          def addPost(user_id, post_id, raw_freq)
            send_addPost(user_id, post_id, raw_freq)
            return recv_addPost()
          end

          def send_addPost(user_id, post_id, raw_freq)
            send_message('addPost', AddPost_args, :user_id => user_id, :post_id => post_id, :raw_freq => raw_freq)
          end

          def recv_addPost()
            result = receive_message(AddPost_result)
            return result.success unless result.success.nil?
            raise result.ee unless result.ee.nil?
            raise result.te unless result.te.nil?
            raise result.nfe unless result.nfe.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addPost failed: unknown result')
          end

          def user_v_post(user_id, verb, post_id)
            send_user_v_post(user_id, verb, post_id)
            return recv_user_v_post()
          end

          def send_user_v_post(user_id, verb, post_id)
            send_message('user_v_post', User_v_post_args, :user_id => user_id, :verb => verb, :post_id => post_id)
          end

          def recv_user_v_post()
            result = receive_message(User_v_post_result)
            return result.success unless result.success.nil?
            raise result.nfe unless result.nfe.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'user_v_post failed: unknown result')
          end

          def user_v_comment(user_id, verb, comment_id)
            send_user_v_comment(user_id, verb, comment_id)
            return recv_user_v_comment()
          end

          def send_user_v_comment(user_id, verb, comment_id)
            send_message('user_v_comment', User_v_comment_args, :user_id => user_id, :verb => verb, :comment_id => comment_id)
          end

          def recv_user_v_comment()
            result = receive_message(User_v_comment_result)
            return result.success unless result.success.nil?
            raise result.nfe unless result.nfe.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'user_v_comment failed: unknown result')
          end

          def user_top_terms(user_id, limit)
            send_user_top_terms(user_id, limit)
            return recv_user_top_terms()
          end

          def send_user_top_terms(user_id, limit)
            send_message('user_top_terms', User_top_terms_args, :user_id => user_id, :limit => limit)
          end

          def recv_user_top_terms()
            result = receive_message(User_top_terms_result)
            return result.success unless result.success.nil?
            raise result.nfe unless result.nfe.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'user_top_terms failed: unknown result')
          end

          def text_search(tokens)
            send_text_search(tokens)
            return recv_text_search()
          end

          def send_text_search(tokens)
            send_message('text_search', Text_search_args, :tokens => tokens)
          end

          def recv_text_search()
            result = receive_message(Text_search_result)
            return result.success unless result.success.nil?
            raise result.ee unless result.ee.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'text_search failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_ping(seqid, iprot, oprot)
            args = read_args(iprot, Ping_args)
            result = Ping_result.new()
            begin
              result.success = @handler.ping()
            rescue Backend::TimeoutException => te
              result.te = te
            end
            write_result(result, oprot, 'ping', seqid)
          end

          def process_recPosts(seqid, iprot, oprot)
            args = read_args(iprot, RecPosts_args)
            result = RecPosts_result.new()
            begin
              result.success = @handler.recPosts(args.user_id)
            rescue Backend::NotFoundException => nfe
              result.nfe = nfe
            rescue Backend::EngineException => ee
              result.ee = ee
            rescue Backend::TimeoutException => te
              result.te = te
            end
            write_result(result, oprot, 'recPosts', seqid)
          end

          def process_addUser(seqid, iprot, oprot)
            args = read_args(iprot, AddUser_args)
            result = AddUser_result.new()
            begin
              result.success = @handler.addUser(args.user_id)
            rescue Backend::EngineException => ee
              result.ee = ee
            rescue Backend::TimeoutException => te
              result.te = te
            end
            write_result(result, oprot, 'addUser', seqid)
          end

          def process_addPost(seqid, iprot, oprot)
            args = read_args(iprot, AddPost_args)
            result = AddPost_result.new()
            begin
              result.success = @handler.addPost(args.user_id, args.post_id, args.raw_freq)
            rescue Backend::EngineException => ee
              result.ee = ee
            rescue Backend::TimeoutException => te
              result.te = te
            rescue Backend::NotFoundException => nfe
              result.nfe = nfe
            end
            write_result(result, oprot, 'addPost', seqid)
          end

          def process_user_v_post(seqid, iprot, oprot)
            args = read_args(iprot, User_v_post_args)
            result = User_v_post_result.new()
            begin
              result.success = @handler.user_v_post(args.user_id, args.verb, args.post_id)
            rescue Backend::NotFoundException => nfe
              result.nfe = nfe
            end
            write_result(result, oprot, 'user_v_post', seqid)
          end

          def process_user_v_comment(seqid, iprot, oprot)
            args = read_args(iprot, User_v_comment_args)
            result = User_v_comment_result.new()
            begin
              result.success = @handler.user_v_comment(args.user_id, args.verb, args.comment_id)
            rescue Backend::NotFoundException => nfe
              result.nfe = nfe
            end
            write_result(result, oprot, 'user_v_comment', seqid)
          end

          def process_user_top_terms(seqid, iprot, oprot)
            args = read_args(iprot, User_top_terms_args)
            result = User_top_terms_result.new()
            begin
              result.success = @handler.user_top_terms(args.user_id, args.limit)
            rescue Backend::NotFoundException => nfe
              result.nfe = nfe
            end
            write_result(result, oprot, 'user_top_terms', seqid)
          end

          def process_text_search(seqid, iprot, oprot)
            args = read_args(iprot, Text_search_args)
            result = Text_search_result.new()
            begin
              result.success = @handler.text_search(args.tokens)
            rescue Backend::EngineException => ee
              result.ee = ee
            end
            write_result(result, oprot, 'text_search', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Ping_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Ping_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          TE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
            TE => {:type => ::Thrift::Types::STRUCT, :name => 'te', :class => Backend::TimeoutException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RecPosts_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RecPosts_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          NFE = 1
          EE = 2
          TE = 3

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Backend::PostList},
            NFE => {:type => ::Thrift::Types::STRUCT, :name => 'nfe', :class => Backend::NotFoundException},
            EE => {:type => ::Thrift::Types::STRUCT, :name => 'ee', :class => Backend::EngineException},
            TE => {:type => ::Thrift::Types::STRUCT, :name => 'te', :class => Backend::TimeoutException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddUser_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddUser_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EE = 1
          TE = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            EE => {:type => ::Thrift::Types::STRUCT, :name => 'ee', :class => Backend::EngineException},
            TE => {:type => ::Thrift::Types::STRUCT, :name => 'te', :class => Backend::TimeoutException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddPost_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1
          POST_ID = 2
          RAW_FREQ = 3

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'},
            POST_ID => {:type => ::Thrift::Types::I64, :name => 'post_id'},
            RAW_FREQ => {:type => ::Thrift::Types::LIST, :name => 'raw_freq', :element => {:type => ::Thrift::Types::STRUCT, :class => Backend::Token}}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field post_id is unset!') unless @post_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field raw_freq is unset!') unless @raw_freq
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddPost_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EE = 1
          TE = 2
          NFE = 3

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            EE => {:type => ::Thrift::Types::STRUCT, :name => 'ee', :class => Backend::EngineException},
            TE => {:type => ::Thrift::Types::STRUCT, :name => 'te', :class => Backend::TimeoutException},
            NFE => {:type => ::Thrift::Types::STRUCT, :name => 'nfe', :class => Backend::NotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class User_v_post_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1
          VERB = 2
          POST_ID = 3

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'},
            VERB => {:type => ::Thrift::Types::I32, :name => 'verb', :enum_class => Backend::Action},
            POST_ID => {:type => ::Thrift::Types::I64, :name => 'post_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field verb is unset!') unless @verb
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field post_id is unset!') unless @post_id
            unless @verb.nil? || Backend::Action::VALID_VALUES.include?(@verb)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field verb!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class User_v_post_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          NFE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            NFE => {:type => ::Thrift::Types::STRUCT, :name => 'nfe', :class => Backend::NotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class User_v_comment_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1
          VERB = 2
          COMMENT_ID = 3

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'},
            VERB => {:type => ::Thrift::Types::I32, :name => 'verb', :enum_class => Backend::Action},
            COMMENT_ID => {:type => ::Thrift::Types::I64, :name => 'comment_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field verb is unset!') unless @verb
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field comment_id is unset!') unless @comment_id
            unless @verb.nil? || Backend::Action::VALID_VALUES.include?(@verb)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field verb!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class User_v_comment_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          NFE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            NFE => {:type => ::Thrift::Types::STRUCT, :name => 'nfe', :class => Backend::NotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class User_top_terms_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1
          LIMIT = 2

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'},
            LIMIT => {:type => ::Thrift::Types::I64, :name => 'limit'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field limit is unset!') unless @limit
          end

          ::Thrift::Struct.generate_accessors self
        end

        class User_top_terms_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          NFE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I64}},
            NFE => {:type => ::Thrift::Types::STRUCT, :name => 'nfe', :class => Backend::NotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Text_search_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          TOKENS = 1

          FIELDS = {
            TOKENS => {:type => ::Thrift::Types::LIST, :name => 'tokens', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field tokens is unset!') unless @tokens
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Text_search_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
            EE => {:type => ::Thrift::Types::STRUCT, :name => 'ee', :class => Backend::EngineException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
