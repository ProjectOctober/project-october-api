#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'october_types'

    module Backend
      module Recommender
        class Client
          include ::Thrift::Client

          def ping()
            send_ping()
            return recv_ping()
          end

          def send_ping()
            send_message('ping', Ping_args)
          end

          def recv_ping()
            result = receive_message(Ping_result)
            return result.success unless result.success.nil?
            raise result.te unless result.te.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ping failed: unknown result')
          end

          def recPosts(user_id, limit)
            send_recPosts(user_id, limit)
            return recv_recPosts()
          end

          def send_recPosts(user_id, limit)
            send_message('recPosts', RecPosts_args, :user_id => user_id, :limit => limit)
          end

          def recv_recPosts()
            result = receive_message(RecPosts_result)
            return result.success unless result.success.nil?
            raise result.nfe unless result.nfe.nil?
            raise result.ee unless result.ee.nil?
            raise result.te unless result.te.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'recPosts failed: unknown result')
          end

          def addUser(user_id)
            send_addUser(user_id)
            return recv_addUser()
          end

          def send_addUser(user_id)
            send_message('addUser', AddUser_args, :user_id => user_id)
          end

          def recv_addUser()
            result = receive_message(AddUser_result)
            return result.success unless result.success.nil?
            raise result.ee unless result.ee.nil?
            raise result.te unless result.te.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addUser failed: unknown result')
          end

          def addPost(user_id, post_id, raw_freq)
            send_addPost(user_id, post_id, raw_freq)
            return recv_addPost()
          end

          def send_addPost(user_id, post_id, raw_freq)
            send_message('addPost', AddPost_args, :user_id => user_id, :post_id => post_id, :raw_freq => raw_freq)
          end

          def recv_addPost()
            result = receive_message(AddPost_result)
            return result.success unless result.success.nil?
            raise result.ee unless result.ee.nil?
            raise result.te unless result.te.nil?
            raise result.nfe unless result.nfe.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addPost failed: unknown result')
          end

          def userToPost(user_id, verb, post_id)
            send_userToPost(user_id, verb, post_id)
            return recv_userToPost()
          end

          def send_userToPost(user_id, verb, post_id)
            send_message('userToPost', UserToPost_args, :user_id => user_id, :verb => verb, :post_id => post_id)
          end

          def recv_userToPost()
            result = receive_message(UserToPost_result)
            return result.success unless result.success.nil?
            raise result.nfe unless result.nfe.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'userToPost failed: unknown result')
          end

          def userToComment(user_id, verb, comment_id)
            send_userToComment(user_id, verb, comment_id)
            return recv_userToComment()
          end

          def send_userToComment(user_id, verb, comment_id)
            send_message('userToComment', UserToComment_args, :user_id => user_id, :verb => verb, :comment_id => comment_id)
          end

          def recv_userToComment()
            result = receive_message(UserToComment_result)
            return result.success unless result.success.nil?
            raise result.nfe unless result.nfe.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'userToComment failed: unknown result')
          end

          def userToUser(actioner_id, verb, actionee_id)
            send_userToUser(actioner_id, verb, actionee_id)
            return recv_userToUser()
          end

          def send_userToUser(actioner_id, verb, actionee_id)
            send_message('userToUser', UserToUser_args, :actioner_id => actioner_id, :verb => verb, :actionee_id => actionee_id)
          end

          def recv_userToUser()
            result = receive_message(UserToUser_result)
            return result.success unless result.success.nil?
            raise result.nfe unless result.nfe.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'userToUser failed: unknown result')
          end

          def userTopTerms(user_id, limit)
            send_userTopTerms(user_id, limit)
            return recv_userTopTerms()
          end

          def send_userTopTerms(user_id, limit)
            send_message('userTopTerms', UserTopTerms_args, :user_id => user_id, :limit => limit)
          end

          def recv_userTopTerms()
            result = receive_message(UserTopTerms_result)
            return result.success unless result.success.nil?
            raise result.nfe unless result.nfe.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'userTopTerms failed: unknown result')
          end

          def textSearch(tokens, limit)
            send_textSearch(tokens, limit)
            return recv_textSearch()
          end

          def send_textSearch(tokens, limit)
            send_message('textSearch', TextSearch_args, :tokens => tokens, :limit => limit)
          end

          def recv_textSearch()
            result = receive_message(TextSearch_result)
            return result.success unless result.success.nil?
            raise result.ee unless result.ee.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'textSearch failed: unknown result')
          end

          def addUserTerms(user_id, terms)
            send_addUserTerms(user_id, terms)
            return recv_addUserTerms()
          end

          def send_addUserTerms(user_id, terms)
            send_message('addUserTerms', AddUserTerms_args, :user_id => user_id, :terms => terms)
          end

          def recv_addUserTerms()
            result = receive_message(AddUserTerms_result)
            return result.success unless result.success.nil?
            raise result.nfe unless result.nfe.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addUserTerms failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_ping(seqid, iprot, oprot)
            args = read_args(iprot, Ping_args)
            result = Ping_result.new()
            begin
              result.success = @handler.ping()
            rescue Backend::TimeoutException => te
              result.te = te
            end
            write_result(result, oprot, 'ping', seqid)
          end

          def process_recPosts(seqid, iprot, oprot)
            args = read_args(iprot, RecPosts_args)
            result = RecPosts_result.new()
            begin
              result.success = @handler.recPosts(args.user_id, args.limit)
            rescue Backend::NotFoundException => nfe
              result.nfe = nfe
            rescue Backend::EngineException => ee
              result.ee = ee
            rescue Backend::TimeoutException => te
              result.te = te
            end
            write_result(result, oprot, 'recPosts', seqid)
          end

          def process_addUser(seqid, iprot, oprot)
            args = read_args(iprot, AddUser_args)
            result = AddUser_result.new()
            begin
              result.success = @handler.addUser(args.user_id)
            rescue Backend::EngineException => ee
              result.ee = ee
            rescue Backend::TimeoutException => te
              result.te = te
            end
            write_result(result, oprot, 'addUser', seqid)
          end

          def process_addPost(seqid, iprot, oprot)
            args = read_args(iprot, AddPost_args)
            result = AddPost_result.new()
            begin
              result.success = @handler.addPost(args.user_id, args.post_id, args.raw_freq)
            rescue Backend::EngineException => ee
              result.ee = ee
            rescue Backend::TimeoutException => te
              result.te = te
            rescue Backend::NotFoundException => nfe
              result.nfe = nfe
            end
            write_result(result, oprot, 'addPost', seqid)
          end

          def process_userToPost(seqid, iprot, oprot)
            args = read_args(iprot, UserToPost_args)
            result = UserToPost_result.new()
            begin
              result.success = @handler.userToPost(args.user_id, args.verb, args.post_id)
            rescue Backend::NotFoundException => nfe
              result.nfe = nfe
            end
            write_result(result, oprot, 'userToPost', seqid)
          end

          def process_userToComment(seqid, iprot, oprot)
            args = read_args(iprot, UserToComment_args)
            result = UserToComment_result.new()
            begin
              result.success = @handler.userToComment(args.user_id, args.verb, args.comment_id)
            rescue Backend::NotFoundException => nfe
              result.nfe = nfe
            end
            write_result(result, oprot, 'userToComment', seqid)
          end

          def process_userToUser(seqid, iprot, oprot)
            args = read_args(iprot, UserToUser_args)
            result = UserToUser_result.new()
            begin
              result.success = @handler.userToUser(args.actioner_id, args.verb, args.actionee_id)
            rescue Backend::NotFoundException => nfe
              result.nfe = nfe
            end
            write_result(result, oprot, 'userToUser', seqid)
          end

          def process_userTopTerms(seqid, iprot, oprot)
            args = read_args(iprot, UserTopTerms_args)
            result = UserTopTerms_result.new()
            begin
              result.success = @handler.userTopTerms(args.user_id, args.limit)
            rescue Backend::NotFoundException => nfe
              result.nfe = nfe
            end
            write_result(result, oprot, 'userTopTerms', seqid)
          end

          def process_textSearch(seqid, iprot, oprot)
            args = read_args(iprot, TextSearch_args)
            result = TextSearch_result.new()
            begin
              result.success = @handler.textSearch(args.tokens, args.limit)
            rescue Backend::EngineException => ee
              result.ee = ee
            end
            write_result(result, oprot, 'textSearch', seqid)
          end

          def process_addUserTerms(seqid, iprot, oprot)
            args = read_args(iprot, AddUserTerms_args)
            result = AddUserTerms_result.new()
            begin
              result.success = @handler.addUserTerms(args.user_id, args.terms)
            rescue Backend::NotFoundException => nfe
              result.nfe = nfe
            end
            write_result(result, oprot, 'addUserTerms', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Ping_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Ping_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          TE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
            TE => {:type => ::Thrift::Types::STRUCT, :name => 'te', :class => Backend::TimeoutException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RecPosts_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1
          LIMIT = 2

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'},
            LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field limit is unset!') unless @limit
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RecPosts_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          NFE = 1
          EE = 2
          TE = 3

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Backend::PostList},
            NFE => {:type => ::Thrift::Types::STRUCT, :name => 'nfe', :class => Backend::NotFoundException},
            EE => {:type => ::Thrift::Types::STRUCT, :name => 'ee', :class => Backend::EngineException},
            TE => {:type => ::Thrift::Types::STRUCT, :name => 'te', :class => Backend::TimeoutException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddUser_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddUser_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EE = 1
          TE = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            EE => {:type => ::Thrift::Types::STRUCT, :name => 'ee', :class => Backend::EngineException},
            TE => {:type => ::Thrift::Types::STRUCT, :name => 'te', :class => Backend::TimeoutException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddPost_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1
          POST_ID = 2
          RAW_FREQ = 3

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'},
            POST_ID => {:type => ::Thrift::Types::I64, :name => 'post_id'},
            RAW_FREQ => {:type => ::Thrift::Types::LIST, :name => 'raw_freq', :element => {:type => ::Thrift::Types::STRUCT, :class => Backend::Token}}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field post_id is unset!') unless @post_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field raw_freq is unset!') unless @raw_freq
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddPost_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EE = 1
          TE = 2
          NFE = 3

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            EE => {:type => ::Thrift::Types::STRUCT, :name => 'ee', :class => Backend::EngineException},
            TE => {:type => ::Thrift::Types::STRUCT, :name => 'te', :class => Backend::TimeoutException},
            NFE => {:type => ::Thrift::Types::STRUCT, :name => 'nfe', :class => Backend::NotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UserToPost_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1
          VERB = 2
          POST_ID = 3

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'},
            VERB => {:type => ::Thrift::Types::I32, :name => 'verb', :enum_class => Backend::Action},
            POST_ID => {:type => ::Thrift::Types::I64, :name => 'post_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field verb is unset!') unless @verb
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field post_id is unset!') unless @post_id
            unless @verb.nil? || Backend::Action::VALID_VALUES.include?(@verb)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field verb!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UserToPost_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          NFE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            NFE => {:type => ::Thrift::Types::STRUCT, :name => 'nfe', :class => Backend::NotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UserToComment_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1
          VERB = 2
          COMMENT_ID = 3

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'},
            VERB => {:type => ::Thrift::Types::I32, :name => 'verb', :enum_class => Backend::Action},
            COMMENT_ID => {:type => ::Thrift::Types::I64, :name => 'comment_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field verb is unset!') unless @verb
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field comment_id is unset!') unless @comment_id
            unless @verb.nil? || Backend::Action::VALID_VALUES.include?(@verb)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field verb!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UserToComment_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          NFE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            NFE => {:type => ::Thrift::Types::STRUCT, :name => 'nfe', :class => Backend::NotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UserToUser_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ACTIONER_ID = 1
          VERB = 2
          ACTIONEE_ID = 3

          FIELDS = {
            ACTIONER_ID => {:type => ::Thrift::Types::I64, :name => 'actioner_id'},
            VERB => {:type => ::Thrift::Types::I32, :name => 'verb', :enum_class => Backend::Action},
            ACTIONEE_ID => {:type => ::Thrift::Types::I64, :name => 'actionee_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field actioner_id is unset!') unless @actioner_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field verb is unset!') unless @verb
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field actionee_id is unset!') unless @actionee_id
            unless @verb.nil? || Backend::Action::VALID_VALUES.include?(@verb)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field verb!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UserToUser_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          NFE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            NFE => {:type => ::Thrift::Types::STRUCT, :name => 'nfe', :class => Backend::NotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UserTopTerms_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1
          LIMIT = 2

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'},
            LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field limit is unset!') unless @limit
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UserTopTerms_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          NFE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I64}},
            NFE => {:type => ::Thrift::Types::STRUCT, :name => 'nfe', :class => Backend::NotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class TextSearch_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          TOKENS = 1
          LIMIT = 2

          FIELDS = {
            TOKENS => {:type => ::Thrift::Types::LIST, :name => 'tokens', :element => {:type => ::Thrift::Types::STRING}},
            LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field tokens is unset!') unless @tokens
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field limit is unset!') unless @limit
          end

          ::Thrift::Struct.generate_accessors self
        end

        class TextSearch_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::DOUBLE}},
            EE => {:type => ::Thrift::Types::STRUCT, :name => 'ee', :class => Backend::EngineException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddUserTerms_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USER_ID = 1
          TERMS = 2

          FIELDS = {
            USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'},
            TERMS => {:type => ::Thrift::Types::LIST, :name => 'terms', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field terms is unset!') unless @terms
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AddUserTerms_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          NFE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            NFE => {:type => ::Thrift::Types::STRUCT, :name => 'nfe', :class => Backend::NotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
