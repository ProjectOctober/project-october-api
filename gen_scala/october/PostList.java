/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package october;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A list of posts along with a confidence for the accuracy of the list.
 * @param confidence, the confidence in the results.
 * @param posts, a list of Posts.
 */
public class PostList implements org.apache.thrift.TBase<PostList, PostList._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PostList");

  private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField POSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("posts", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PostListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PostListTupleSchemeFactory());
  }

  public double confidence; // optional
  public List<Post> posts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONFIDENCE((short)1, "confidence"),
    POSTS((short)2, "posts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONFIDENCE
          return CONFIDENCE;
        case 2: // POSTS
          return POSTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONFIDENCE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.CONFIDENCE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSTS, new org.apache.thrift.meta_data.FieldMetaData("posts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Post.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PostList.class, metaDataMap);
  }

  public PostList() {
  }

  public PostList(
    List<Post> posts)
  {
    this();
    this.posts = posts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PostList(PostList other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.confidence = other.confidence;
    if (other.isSetPosts()) {
      List<Post> __this__posts = new ArrayList<Post>();
      for (Post other_element : other.posts) {
        __this__posts.add(new Post(other_element));
      }
      this.posts = __this__posts;
    }
  }

  public PostList deepCopy() {
    return new PostList(this);
  }

  @Override
  public void clear() {
    setConfidenceIsSet(false);
    this.confidence = 0.0;
    this.posts = null;
  }

  public double getConfidence() {
    return this.confidence;
  }

  public PostList setConfidence(double confidence) {
    this.confidence = confidence;
    setConfidenceIsSet(true);
    return this;
  }

  public void unsetConfidence() {
    __isset_bit_vector.clear(__CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence() {
    return __isset_bit_vector.get(__CONFIDENCE_ISSET_ID);
  }

  public void setConfidenceIsSet(boolean value) {
    __isset_bit_vector.set(__CONFIDENCE_ISSET_ID, value);
  }

  public int getPostsSize() {
    return (this.posts == null) ? 0 : this.posts.size();
  }

  public java.util.Iterator<Post> getPostsIterator() {
    return (this.posts == null) ? null : this.posts.iterator();
  }

  public void addToPosts(Post elem) {
    if (this.posts == null) {
      this.posts = new ArrayList<Post>();
    }
    this.posts.add(elem);
  }

  public List<Post> getPosts() {
    return this.posts;
  }

  public PostList setPosts(List<Post> posts) {
    this.posts = posts;
    return this;
  }

  public void unsetPosts() {
    this.posts = null;
  }

  /** Returns true if field posts is set (has been assigned a value) and false otherwise */
  public boolean isSetPosts() {
    return this.posts != null;
  }

  public void setPostsIsSet(boolean value) {
    if (!value) {
      this.posts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONFIDENCE:
      if (value == null) {
        unsetConfidence();
      } else {
        setConfidence((Double)value);
      }
      break;

    case POSTS:
      if (value == null) {
        unsetPosts();
      } else {
        setPosts((List<Post>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONFIDENCE:
      return Double.valueOf(getConfidence());

    case POSTS:
      return getPosts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONFIDENCE:
      return isSetConfidence();
    case POSTS:
      return isSetPosts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PostList)
      return this.equals((PostList)that);
    return false;
  }

  public boolean equals(PostList that) {
    if (that == null)
      return false;

    boolean this_present_confidence = true && this.isSetConfidence();
    boolean that_present_confidence = true && that.isSetConfidence();
    if (this_present_confidence || that_present_confidence) {
      if (!(this_present_confidence && that_present_confidence))
        return false;
      if (this.confidence != that.confidence)
        return false;
    }

    boolean this_present_posts = true && this.isSetPosts();
    boolean that_present_posts = true && that.isSetPosts();
    if (this_present_posts || that_present_posts) {
      if (!(this_present_posts && that_present_posts))
        return false;
      if (!this.posts.equals(that.posts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PostList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PostList typedOther = (PostList)other;

    lastComparison = Boolean.valueOf(isSetConfidence()).compareTo(typedOther.isSetConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, typedOther.confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosts()).compareTo(typedOther.isSetPosts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posts, typedOther.posts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PostList(");
    boolean first = true;

    if (isSetConfidence()) {
      sb.append("confidence:");
      sb.append(this.confidence);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("posts:");
    if (this.posts == null) {
      sb.append("null");
    } else {
      sb.append(this.posts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (posts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'posts' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PostListStandardSchemeFactory implements SchemeFactory {
    public PostListStandardScheme getScheme() {
      return new PostListStandardScheme();
    }
  }

  private static class PostListStandardScheme extends StandardScheme<PostList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PostList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confidence = iprot.readDouble();
              struct.setConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.posts = new ArrayList<Post>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Post _elem2; // required
                  _elem2 = new Post();
                  _elem2.read(iprot);
                  struct.posts.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPostsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PostList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetConfidence()) {
        oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.confidence);
        oprot.writeFieldEnd();
      }
      if (struct.posts != null) {
        oprot.writeFieldBegin(POSTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.posts.size()));
          for (Post _iter3 : struct.posts)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PostListTupleSchemeFactory implements SchemeFactory {
    public PostListTupleScheme getScheme() {
      return new PostListTupleScheme();
    }
  }

  private static class PostListTupleScheme extends TupleScheme<PostList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PostList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.posts.size());
        for (Post _iter4 : struct.posts)
        {
          _iter4.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetConfidence()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetConfidence()) {
        oprot.writeDouble(struct.confidence);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PostList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.posts = new ArrayList<Post>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          Post _elem7; // required
          _elem7 = new Post();
          _elem7.read(iprot);
          struct.posts.add(_elem7);
        }
      }
      struct.setPostsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.confidence = iprot.readDouble();
        struct.setConfidenceIsSet(true);
      }
    }
  }

}

